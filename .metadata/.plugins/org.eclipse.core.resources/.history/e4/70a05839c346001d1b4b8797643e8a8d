package com.itwillbs.board;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.itwillbs.member.MemberBean;

public class BoardDAO {
	// DAO(Data Access Object) : 데이터(DB) 처리객체
	
	// 공통으로 사용할 (전역)변수 선언
	private Connection con = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;
	private String sql = "";
	
	// 생성자
	public BoardDAO() {
		System.out.println(" DAO : BoardDAO() 객체 생성");
		System.out.println(" DAO : itwill_board 테이블 접근준비 완료");
	}
	
	// DB 연결 메서드 - getConnection()
	private Connection getConnection() throws Exception {
		
		// DB연결정보(상수)
		final String DRIVER = "com.mysql.cj.jdbc.Driver";
		final String DBURL = "jdbc:mysql://localhost:3306/jspdb";
		final String DBID = "root";
		final String DBPW = "1234";
		// 1. 드라이버 로드
		Class.forName(DRIVER);
	    System.out.println(" 드라이버 로드 성공!");
	    // 2. 디비 연결 (Connection 선언은 위에서 함)
	    con = DriverManager.getConnection(DBURL, DBID, DBPW);
	    System.out.println(" DAO : DB 연결 성공!");
	    System.out.println(" DAO : "+con);
	    
		return con;
	}
	// DB 연결 메서드 - getConnection()
	
	
	// 자원 해제 메서드 - closeDB()
	public void closeDB() {
		System.out.println(" DAO : DB 연결자원 해제");
		 try {
			// 한 줄 짜리 코드 -> 중괄호 생략
			if(rs!=null) rs.close();	// 기본적으로 null, sql 쿼리를 실행했을 때 null이 아니게 됨
			if(pstmt!=null) pstmt.close();
			if(con!=null) con.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	// 자원 해제 메서드 - closeDB()
	
	
	// 글쓰기 메서드 - insertBoard()
	public void insertBoard(BoardDTO dto) {
		System.out.println(" DAO : insertBoard() 호출");
		int bno = 0;	// 글 번호 저장할 변수
		
		try {
			// 1+2. DB 연결
			con = getConnection();
			// 3. SQL 작성(글번호 계산) & pstmt
			sql = "select max(bno) from itwill_board";
			pstmt = con.prepareStatement(sql);
			// 4. SQL 실행
			rs = pstmt.executeQuery();
			// 5. 데이터 처리
			// 글 번호 계산 : 번호 최대값 + 1 (새 글 번호는 마지막 글의 다음 번호이므로)
			// rs.next()가 true/false를 구분하는 방법
			// => 해당 쿼리를 워크벤치에 실행(select)
			// => 삼각형 커서 : true (커서 이동 가능, sql null 상관없음)
			// => * 커서 or 커서 없음 : false (커서 이동 불가능)
			
			if(rs.next()) {
				// bno = rs.getInt("bno")+1;		// (X)
				// bno = rs.getInt("max(bno)")+1;	// 컬럼명ver. -> 'max(bno)'가 하나의 컬럼명!
				bno = rs.getInt(1)+1;				// 컬럼인덱스ver -> 컬럼명의 인덱스는 1 부터 시작
			}
			
			System.out.println(" DAO : 글번호 = "+bno);
			
				// 3. SQL 작성(insert) & pstmt
				sql = "insert into itwill_board(bno, name, pass, subject, content,"
						+ "readcount, re_ref, re_lev, re_seq, date, ip, file) "
						+ "values (?, ?, ?, ?, ?, ?, ?, ?, ?, now(), ?, ?)";
				pstmt = con.prepareStatement(sql);
				// ???
				pstmt.setInt(1, bno);
				pstmt.setString(2, dto.getName());
				pstmt.setString(3, dto.getPass());
				pstmt.setString(4, dto.getSubject());
				pstmt.setString(5, dto.getContent());
				
				pstmt.setInt(6, 0);		// 조회수 -> 0으로 초기화
				pstmt.setInt(7, bno);	// ref 그룹번호 (bno 초기화)
				pstmt.setInt(8, 0);		// lev 들여쓰기 (0 초기화)
				pstmt.setInt(9, 0);		// seq 순서 (0 초기화)
				
				pstmt.setString(10, dto.getIp());	// 기존의 10번째 물음표가 now()가 되었으므로 번호 밀림
				pstmt.setString(11, dto.getFile());
				
				// 4. SQL 실행
				pstmt.executeUpdate();
				
				System.out.println(" DAO : 게시판 글쓰기 완료!");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeDB();
		}
	}
	// 글쓰기 메서드 - insertBoard()
	
	
	// 글 정보 가져오기 메서드 - getBoardList()
	public ArrayList getBoardList() {
		System.out.println(" DAO : getBoardList() 호출");
		// 글 정보 모두 저장하는 배열
		ArrayList boardList = new ArrayList();
		try {
			// 1+2. DB 연결
			con = getConnection();
			// 3. SQL 작성(select) & pstmt
			sql = "select * from itwill_board";
			pstmt = con.prepareStatement(sql);
			// 4. SQL 실행
			rs = pstmt.executeQuery();
			// 5. 데이터 처리 (DB->DTO->List)
			while(rs.next()) {
				// 데이터 있을 때
				// DB(테이블) 정보 객체에 저장해서 가져오기
				
				// DB(테이블) 정보 -> MemberBean
				BoardDTO dto = new BoardDTO();
				
				dto.setBno(rs.getInt("bno"));
				dto.setName(rs.getString("name"));
				dto.setPass(rs.getString("pass"));
				dto.setSubject(rs.getString("subject"));
				dto.setContent(rs.getString("content"));
				dto.setReadcount(rs.getInt("readcount"));
				dto.setRe_ref(rs.getInt("re_ref"));
				dto.setRe_lev(rs.getInt("re_lev"));
				dto.setRe_seq(rs.getInt("re_seq"));
				dto.setDate(rs.getDate("date"));
				dto.setIp(rs.getString("ip"));
				dto.setFile(rs.getString("file"));

				// BoardDTO 저장 후 -> 생성된 dto를 boardList에 저장
				boardList.add(dto);
				
			}	// if문 끝
			System.out.println(" DAO : 게시판 목록 조회 성공!");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeDB();
		}
		return boardList;
		
	}
	// 글 정보 가져오기 메서드 - getBoardList()
	
	
	// 글정보 가져오기 메서드 - getBoardList(int startRow, int pageSize)
	public ArrayList getBoardList(int startRow, int pageSize) {
		System.out.println(" DAO : getBoardList() 호출");
		// 글 정보 모두 저장하는 배열
		ArrayList boardList = new ArrayList();
		try {
			// 1+2. DB 연결
			con = getConnection();
			// 3. SQL 작성(select) & pstmt
			sql = "select * from itwill_board "
					+ "order by re_ref desc, re_seq asc limit ?, ?";
			pstmt = con.prepareStatement(sql);
			// ?????
			pstmt.setInt(1, startRow-1);	// 시작행 -1
			pstmt.setInt(2, pageSize);		// 한 페이지당 글 개수
			
			// 4. SQL 실행
			rs = pstmt.executeQuery();
			// 5. 데이터 처리 (DB->DTO->List)
			while(rs.next()) {
				// 데이터 있을 때
				// DB(테이블) 정보 객체에 저장해서 가져오기
				
				// DB(테이블) 정보 -> MemberBean
				BoardDTO dto = new BoardDTO();
				
				dto.setBno(rs.getInt("bno"));
				dto.setName(rs.getString("name"));
				dto.setPass(rs.getString("pass"));
				dto.setSubject(rs.getString("subject"));
				dto.setContent(rs.getString("content"));
				dto.setReadcount(rs.getInt("readcount"));
				dto.setRe_ref(rs.getInt("re_ref"));
				dto.setRe_lev(rs.getInt("re_lev"));
				dto.setRe_seq(rs.getInt("re_seq"));
				dto.setDate(rs.getDate("date"));
				dto.setIp(rs.getString("ip"));
				dto.setFile(rs.getString("file"));
				
				// BoardDTO 저장 후 -> 생성된 dto를 boardList에 저장
				boardList.add(dto);
				
			}	// if문 끝
			System.out.println(" DAO : 게시판 목록 조회 성공!");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeDB();
		}
		return boardList;
		
	}
	// 글정보 가져오기 메서드 - getBoardList(int startRow, int pageSize)
	
	
	// 전체 글 개수 - getBoardCount()
	public int getBoardCount() {
		int cnt = 0;
		
		try {
			// 1+2. DB 연결
			getConnection();
			// 3. SQL 작성 & pstmt 객체
			sql = "select count(*) from itwill_board";
			// 또는 select count(bno) from itwill_board;
			pstmt=con.prepareStatement(sql);
			// 4. SQL 실행
			rs = pstmt.executeQuery();
			// 5. 데이터 처리
			if(rs.next()) {
				cnt = rs.getInt("count(*)");
				// 또는 cnt = rs.getInt(1)
			}
			System.out.println(" DAO : 전체 글의 개수 "+cnt+"개");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeDB();
		}
		
		return cnt;
	}
	// 전체 글 개수 - getBoardCount()
	
	
	// 조회수 1 증가 - updateReadcount(bno)
	public void updateReadcount(int bno) {

		try {
			// 1+2. DB 연결
			con = getConnection();
			// 3. SQL 작성(update) & pstmt 객체
			sql = "update itwill_board set readcount=readcount+1 "
					+ "where bno=?";
			pstmt = con.prepareStatement(sql);
			// ?????
			pstmt.setInt(1, bno);
			// 4. SQL 실행
			pstmt.executeUpdate();
			System.out.println(" DAO : 조회수 1 증가 완료!");
		} catch (Exception e) {
			e.printStackTrace();
		}
	
	}
	// 조회수 1 증가 - updateReadcount(bno)
	
	
	// 게시판 글 1개의 정보 조회 - getBoard(bno)
	public BoardDTO getBoard(int bno) {
		BoardDTO dto = null;
		try {
			// 1+2. DB 연결
			con = getConnection();
			// 3. SQL 작성(select) & pstmt 객체
			sql = "select * from itwill_board where bno=?";
			pstmt = con.prepareStatement(sql);
			// ?????
			pstmt.setInt(1, bno);
			// 4. SQL 실행
			rs = pstmt.executeQuery();
			// 5. 데이터 처리 -> 처리결과 BoardDTO에 저장 -> try밖에 dto 변수 선언
			if(rs.next()) {
				dto = new BoardDTO();
				// (rs에 있는) DB 정보 -> DTO에 저장
				dto.setBno(rs.getInt("bno"));
				dto.setName(rs.getString("name"));
				dto.setPass(rs.getString("pass"));
				dto.setSubject(rs.getString("subject"));
				dto.setContent(rs.getString("content"));
				dto.setReadcount(rs.getInt("readcount"));
				dto.setRe_ref(rs.getInt("re_ref"));
				dto.setRe_lev(rs.getInt("re_lev"));
				dto.setRe_seq(rs.getInt("re_seq"));
				dto.setDate(rs.getDate("date"));
				dto.setIp(rs.getString("ip"));
				dto.setFile(rs.getString("file"));
			}
			
			System.out.println(" DAO : 글 정보 1개 저장완료!");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
	        closeDB();
	    }
		
		return dto;
	}
	// 게시판 글 1개의 정보 조회 - getBoard(bno)
	
	
	// 게시글 수정 - updateBoard(DTO)
	public int updateBoard(BoardDTO dto) {
		int result = -1;
		try {
		    // 1+2. DB 연결
		    con = getConnection();
		    // 3. SQL 작성(select) & pstmt 객체
		    sql = "select pass from itwill_board where bno=?";
		    pstmt = con.prepareStatement(sql);
		    // ?????
		    // pstmt.setInt(1, bno);	// 오류
		    pstmt.setInt(1, dto.getBno());
		    // 4. SQL 실행
		    rs = pstmt.executeQuery();
		    // 5. 데이터 처리
		    if(rs.next()) {
		    	if(dto.getPass().equals(rs.getString("pass"))) {
		    		// 본인이 쓴 글 맞음 -> 수정 (제목, 이름, 내용만!)
		    		// 3. SQL 작성(update) & pstmt 객체
		    		sql = "update itwill_board set subject=?, name=?, content=? where bno=?";
		    		pstmt = con.prepareStatement(sql);
		    		// ?????
		    		pstmt.setString(1, dto.getSubject());
		    		pstmt.setString(2, dto.getName());
		    		pstmt.setString(3, dto.getContent());
		    		pstmt.setInt(4, dto.getBno());
		    		// 4. SQL 실행
		    		// 이 데이터는 항상 1
		    		// executeUpdate는 정수int를 리턴함 (몇 줄에 영향을 줬는지)
		    		// update구문은 bno(pk)로 조건을 걸었기 때문에 무조건 한 줄(=1)만 업데이트 함
		    		result = pstmt.executeUpdate();
		    		
		    	} else {	// 비밀번호 오류
		    		result = 0;
		    	}
		    	
		    } else {	// 게시판 글 없음
		    	result = -1;
		    }
		    
		    System.out.println(" DAO : 게시판 정보 수정완료 ("+result+")");
		    
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeDB();
		}
		
		return result;
	}
	// 게시글 수정 - updateBoard(DTO)
	
	
	// 게시글 삭제 - deleteBoard(DTO)
	public int deleteBoard(int bno, String pass) {	// deletePro.jsp에서 bno, pass를 각각 따로 받았으므로
		int result = -1;
		try {
		    // 1+2. DB 연결
		    con = getConnection();
		    // 3. SQL 작성(select) & pstmt 객체
		    sql = "select pass from itwill_board where bno=?";
		    pstmt = con.prepareStatement(sql);
		    // ?????
		    pstmt.setInt(1, bno);
		    // 4. SQL 실행
		    rs = pstmt.executeQuery();
		    // 5. 데이터 처리
		    if(rs.next()) {
		    	if(pass.equals(rs.getString("pass"))) {
		    		// 본인이 쓴 글 맞음 -> 삭제
		    		// 3. SQL 작성(delete) & pstmt 객체
		    		sql = "delete from itwill_board where bno=?";
		    		pstmt = con.prepareStatement(sql);
		    		// ?????
		    		pstmt.setInt(1, bno);
		    		// 4. SQL 실행
		    		result = pstmt.executeUpdate();
		    		
		    	} else {	// 비밀번호 오류
		    		result = 0;
		    	}
		    	
		    } else {	// 게시판 글 없음
		    	result = -1;
		    }
		    
		    System.out.println(" DAO : 게시판 정보 삭제완료 ("+result+")");
		    
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeDB();
		}
		
		return result;
	}
	// 게시글 삭제 - deleteBoard(DTO)
	
	
	// 답글쓰기 - reInsertBoard(DTO)
	public void reInsertBoard(BoardDTO dto) {
		int bno=0;
		
		try {
		// ========================================================
			// 1) 글번호 계산하기(bno)
		    // 1+2. DB 연결
		    con = getConnection();
		    // 3. SQL 작성 (select) & pstmt 객체
		    sql = "select max(bno) from itwill_board";
		    pstmt = con.prepareStatement(sql);
		    // 4. SQL 실행
		    rs = pstmt.executeQuery();
		    // 5. 데이터 처리
		    if(rs.next()) {
//		    	bno = rs.getInt(1)+1;
		    	bno = rs.getInt("max(bno)")+1;
		    }
		    
		    System.out.println(" DAO : 답글 번호(bno) "+bno+"@@@@@@@@@@@@@@");
		    
		// ========================================================  
		// 2) 답글 순서 재배치
		    // 3. SQL 작성 (update) & pstmt 객체
		    // 같은 그룹에 있으면서(re_ref의 값이 같으면서) 기존의 re_seq 값보다 큰 값이 있을 때
		    // => re_seq 값 +1 증가
		    sql = "update itwill_board set re_seq = re_seq+1 "
		    		+ "where re_ref=? and re_seq>?";
		    pstmt = con.prepareStatement(sql);
		    // ?????
		    pstmt.setInt(1, dto.getRe_ref());
		    pstmt.setInt(2, dto.getRe_seq());
		    // 4. SQL 실행
		    // pstmt.executeUpdate();
		    // 재배치하지 않는 결과가 있을수도 있으므로 출력문 if문으로 감싸기
		    // cnt(count) : update구문이 적용된 수
		    int cnt = pstmt.executeUpdate();
		    if(cnt > 0) {
		    	System.out.println(" DAO : 답글 재정렬 완료!");
		    }
		    
    	// ========================================================
		// 3) 답글 쓰기
		    // 3. SQL 작성 (insert) & pstmt 객체
		    sql = "insert into itwill_board(bno, name, pass, subject, content, "
		    		+ "readcount, re_ref, re_lev, re_seq, date, ip, file) "
		    		+ "values(?, ?, ?, ?, ?, ?, ?, ?, ?, now(), ?, ?)";
		    pstmt = con.prepareStatement(sql);
		    // ?????
			pstmt.setInt(1, bno);
			pstmt.setString(2, dto.getName());
			pstmt.setString(3, dto.getPass());
			pstmt.setString(4, dto.getSubject());
			pstmt.setString(5, dto.getContent());

			pstmt.setInt(6, 0);					// 조회수 0으로 초기화
			pstmt.setInt(7, dto.getRe_ref());	// re_ref : 원글 번호와 동일
			pstmt.setInt(8, dto.getRe_lev()+1);	// re_lev : 원글 lev+1
			pstmt.setInt(9, dto.getRe_seq()+1);	// re_seq : 원글 seq+1
			
			pstmt.setString(10, dto.getIp());
			pstmt.setString(11, dto.getFile());
		    
		    // 4. SQL 실행
			pstmt.executeUpdate();
			
			System.out.println(" DAO : 답글 쓰기 완료!");
		    
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeDB();
		}
	}
	// 답글쓰기 - reInsertBoard(DTO)
	
}
